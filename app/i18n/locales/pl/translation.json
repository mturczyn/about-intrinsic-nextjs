{
    "locale-selector": {
        "message": "Wybierz język."
    },
    "nav": {
        "home": "Główna",
        "contact-info": "Kontakt",
        "technology-stack": "Stack Technologiczny"
    },
    "home": {
        "title": "Cześć, jestem Michał",
        "body": "<0>Nazywam się Michał Turczyn. Pracuję jako inżynier oprogramowania, tworzę strony internetowe (takie jak ta) i cieszę się z tego, co robię. Lubię dogłębnie rozumieć to, co robię, i doprowadzać rzeczy do końca.</0><1>Jestem absolwentem matematyki, co bardzo pomogło mi w zdobywaniu umiejętności programowania.</1><2/><3>Mój pierwszy język programowania, którego się nauczyłem, to C# wraz z frameworkiem WinForms. Przez lata miałem okazję pracować z wieloma frameworkami .NET, takimi jak ASP.NET (Core, Razor Pages) czy WPF, Blazor. Nauczyłem się również JS (HTML, CSS, JS) i frameworka React.</3><4>Wciąż staram się uczyć i rozwijać. Ta strona jest ewolucją <0>poprzedniej strony</0>, która jest napisana w React jako SPA (single page application). Ta strona z kolei jest napisana z wykorzystaniem Next.js i korzysta z optymalizacji, jaką jest SSR (server side rendering). Opracowałem również <1>inną stronę</1> przy użyciu TanStack Router, aby lepiej zgłębić SSR.</4>",
        "previous-employers": "Poprzedni pracodawcy",
        "previous-employers-body": "Przez całą moją karierę pracowałem dla następujących firm:"
    },
    "contact": {
        "poland": "Polska"
    },
    "technology-stack": {
        "theming": "Motywy",
        "theming-description": "Do stylowania strony wykorzystałem bibliotekę TailwindCSS oraz czystego CSSa.",
        "resources": "Zasoby",
        "resources-description": "<0>Przy budowie tej strony wykorzystałem dokumentację Next.js oraz <0>tutorial o tej technologii</0>. Bardzo zmagałem się z obsługą wielu języków. Pierwsza wersja strony była napisana na podstawie <1>tego repozytorium</1>. Jednak potem udało mi się w końcu poprawnie zaimplementować wielojęzyczność za pomocą <2>tej dokumentacji</2>. Widget do wyboru języka zostawiłem z wcześniejszej wersji strony, ze wspomnianego repozytorium.</0>",
        "hosting": "Hostowanie, CI/CD oraz repozytorium",
        "hosting-description": "<0>Kod strony znajduje się na <0>repozytorium GitHub</0>. Platforma <1>Vercel</1> została wykorzystana do hostowania strony - ma ona bardzo dobre wsparcie Next.js, wystarczy wskazać repozytorium GitHub, natomaist platofrma Vercel automatycznie robi deployment oraz ustawia mechanizm CI/CD.</0>",
        "pwa-service-workers": "PWA oraz service workers",
        "pwa-service-workers-description": "Określając poprawnie plik manifestu, umożliwiłem tej stronie działanie jako PWA (więc można ją zainstalować jako aplikację). Co więcej, dodałem niestandardową stronę offline (gdy użytkownik jest offline lub strona jest niedostępna), korzystając z service workerów.",
        "pwa-service-workers-serwist-description": "<0>Pierwsza implementacja service workerów byłą kiepska, ponieważ polagała na dodaniu pliku JS, zupełnie poza systemem budowania aplikacji - trzeba było osobno utworzyć plik i wstawić na sztywno kod JS jako tekst w layoucie, aby zaimportować ten plik. Jednak znalazłem o wiele lepsze rozwiązanie, które rozwiązuje te wszystkie problemy. Jest to biblioteka <0>Serwist</0>, której kod można znaleźć na <1>GitHubie</1>.</0>",
        "pwa-workshop": "Warsztaty PWA",
        "pwa-workshop-description": "<0>Uruchomiłem również <0>stronę PWA</0> z kodem na podstawie <1>tego samouczka</1>, który dotyczył implementacji i ulepszania strony PWA, która była prostym edytorem markdown z możliwością otwierania i zapisywania plików, oraz podglądu \"na żywo\" tworzonego dokumentu. Strona jednak działa poprawnie tylko na komputerach.</0>"
    }
}
